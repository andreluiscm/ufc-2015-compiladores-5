options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)


// Insert a specification of a lexical analysis here.
TOKEN:
{
  < LPAREN: "(" >
  | < RPAREN: ")" >
  | < LCOUCH: "[" >
  | < RCOUCH: "]" >
  | < VIRG: "," >
  | < DOT: "." >
  | < EQ: "=" >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < SEMICOLON: ";" >
  | < LESS: "<" >
  | < NOT: "!" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < STAR: "*" >
  | < AND: "&&" >
  | < IF: "if" >
  | < ELSE: "else" >
  | < WHILE: "while" >
  | < NEW: "new" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < LENGTH: "length" >
  | < THIS: "this" >
  | < VOID: "void" >
  | < PRINT: "System.out.println" >
  | < BOOLEAN: "boolean" >
  | < INTEGER: "int" >
  | < STRING: "String" >
  | < STATIC: "static" >
  | < EXTENDS: "extends" >
  | < RETURN: "return" >
  | < CLASS: "class" >
  | < PUBLIC: "public" >
  | < MAIN: "main" >
  | < IDENTIFIER: (< LETTER >) (< LETTER >| < DIGIT >)* >
  | < #DIGIT: ["0" - "9"] >
  | < #LETTER: ["a" - "z"] | ["A" - "Z"] | "_" >
  | < INTEGER_LITERAL: (< DIGIT >)+ >
}
SKIP:
{
	< "//" (" ")* (["a" - "z","A" - "Z","0" - "9"," ","_",";"])* "\n" >
	| < "/*" (["a" - "z","A" - "Z","0" - "9"])* "*/" >
	| < " " >
	| < "\n" >
	| < "\t" >
}
    
 
    
    


// The following is a simple grammar that will allow you
// to test the generated lexer.

//Grammar available on: http://www.cambridge.org/resources/052182060X/MCIIJ2e/grammar.htm

void Prog() :
{}
{ MainClass() (ClassDeclaration())* < EOF > }

void MainClass() :
{}
{ < CLASS > Identifier() < LBRACE > < PUBLIC > < STATIC > < VOID > < MAIN > < LPAREN > < STRING > < LCOUCH > < RCOUCH > Identifier() < RPAREN > < LBRACE > Stm() < RBRACE > < RBRACE > }

void ClassDeclaration() :
{}
{ < CLASS > Identifier() (< EXTENDS > Identifier())? < LBRACE > (VarDeclaration())* (MethodDeclaration())* < RBRACE > }

void VarDeclaration() :
{}
{ Type() Identifier() < SEMICOLON > }

void MethodDeclaration() :
{}
{ < PUBLIC > Type() Identifier() < LPAREN > (Type() Identifier() (< VIRG > Type() Identifier())*)? < RPAREN > < LBRACE > (LOOKAHEAD(2) VarDeclaration())* (Stm())* < RETURN > Exp() < SEMICOLON > < RBRACE > }

void Type() :
{}
{ LOOKAHEAD(2) < INTEGER > < LCOUCH > < RCOUCH >
  | < BOOLEAN >
  | LOOKAHEAD(2) < INTEGER >
  | Identifier() }
  
void Stm() :
{}
{ < LBRACE > (Stm())* < RBRACE >
  | < IF > < LPAREN > Exp() < RPAREN > Stm() < ELSE > Stm()
  | < WHILE > < LPAREN > Exp() < RPAREN > Stm()
  | < PRINT > < LPAREN > Exp() < RPAREN > < SEMICOLON >
  | LOOKAHEAD(2) Identifier() < EQ > Exp() < SEMICOLON >
  | Identifier() < LCOUCH > Exp() < RCOUCH > < EQ > Exp() < SEMICOLON > }

void Exp() :
{}
{ ExpObj1() (LOOKAHEAD(2) ExpFin())? }

void ExpObj1() :
{}
{ Term() (LOOKAHEAD(2) Op() ExpObj1())? }

void Term() :
{}
{ < INTEGER_LITERAL >
  | < TRUE >
  | < FALSE >
  | Identifier()
  | < THIS >
  | LOOKAHEAD(2) < NEW > < INTEGER > < LCOUCH > Exp() < RCOUCH >
  | LOOKAHEAD(2) < NEW > Identifier() < LPAREN > < RPAREN >
  | < NOT > Exp()
  | < LPAREN > Exp() < RPAREN >}
  
void Op() :
{}
{
  < AND >
  | < LESS >
  | < PLUS >
  | < MINUS >
  | < STAR > }

void ExpFin() :
{}
{
  (< AND >|< LESS >|< PLUS >|< MINUS >|< STAR >) ExpObj1()
  | < LCOUCH > Exp() < RCOUCH >
  | LOOKAHEAD(2) < DOT > < LENGTH >
  | LOOKAHEAD(2) < DOT > Identifier() < LPAREN > (Exp() (< VIRG > Exp())*)? < RPAREN >}

/*void Exp() :
{}
{ Exp() (< AND >|< LESS >|< PLUS >|< MINUS >|< STAR >) Exp()
  | Exp() < LCOUCH > Exp() < RCOUCH >
  | Exp() < DOT > < LENGTH >
  | Exp() < DOT > Identifier() < LPAREN > (Exp() (< VIRG > Exp())*)? < RPAREN >
  | < INTEGER_LITERAL >
  | < TRUE >
  | < FALSE >
  | Identifier()
  | < THIS >
  | < NEW > < INTEGER > < LCOUCH > Exp() < RCOUCH >
  | < NEW > Identifier() < LPAREN > < RPAREN >
  | < NOT > Exp()
  | < LPAREN > Exp() < RPAREN >}*/
  
void Identifier() :
{}
{ < IDENTIFIER > }

void Goal() :
{}
{
  ( MiniJavaToken() )*
  <EOF>
}

void Start() :
{}
{
  ( Prog() )*
  <EOF>
}

void MiniJavaToken():
{}
{
  "class"  |  <IDENTIFIER> | "{" | "public" | "static" | "void" |
  "main" | "(" | "String"  | "[" | "]" | ")" | "}" | "extends" | ";"
  | "return" | "," | "int" | "boolean" | "=" | "if" | "else" | "while"
  | "System.out.println" | "&&" | "<" | "+" | "-" | "*" | "." |
  "length" | <INTEGER_LITERAL> | "true" | "false" | "this" | "new" |
  "!"
}



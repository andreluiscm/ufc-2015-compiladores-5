options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)


// Insert a specification of a lexical analysis here.
TOKEN:
{
  < LPAREN: "(" >
  | < RPAREN: ")" >
  | < LCOUCH: "[" >
  | < RCOUCH: "]" >
  | < VIRG: "," >
  | < DOT: "." >
  | < EQ: "=" >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < SEMICOLON: ";" >
  | < LESS: "<" >
  | < NOT: "!" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < STAR: "*" >
  | < AND: "&&" >
  | < IF: "if" >
  | < ELSE: "else" >
  | < WHILE: "while" >
  | < NEW: "new" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < LENGTH: "length" >
  | < THIS: "this" >
  | < VOID: "void" >
  | < PRINT: "System.out.println" >
  | < BOOLEAN: "boolean" >
  | < INTEGER: "int" >
  | < STRING: "String" >
  | < STATIC: "static" >
  | < EXTENDS: "extends" >
  | < RETURN: "return" >
  | < CLASS: "class" >
  | < PUBLIC: "public" >
  | < MAIN: "main" >
  | < INDETIFIER: (< LETTER >) (< LETTER >| < DIGIT >)* >
  | < #DIGIT: ["0" - "9"] >
  | < #LETTER: ["a" - "z"] | ["A" - "Z"] >
  | < INTEGER_LITERAL: (< DIGIT >)+ >
}
SKIP:
{
	< "//" (["a" - "z","A" - "Z","0" - "9"])* >
	| < "/*" (["a" - "z","A" - "Z","0" - "9"])* "*/" >
	| < " " >
	| < "\n" >
	| < "\t" >
}
    
 
    
    


// The following is a simple grammar that will allow you
// to test the generated lexer.


void Goal() :
{}
{
  ( MiniJavaToken() )*
  <EOF>
}

void MiniJavaToken():
{}
{
  "class"  |  <IDENTIFIER> | "{" | "public" | "static" | "void" |
  "main" | "(" | "String"  | "[" | "]" | ")" | "}" | "extends" | ";"
  | "return" | "," | "int" | "boolean" | "=" | "if" | "else" | "while"
  | "System.out.println" | "&&" | "<" | "+" | "-" | "*" | "." |
  "length" | <INTEGER_LITERAL> | "true" | "false" | "this" | "new" |
  "!"
}



options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)


// Insert a specification of a lexical analysis here.
TOKEN:
{
  < LPAREN: "(" >
  | < RPAREN: ")" >
  | < LCOUCH: "[" >
  | < RCOUCH: "]" >
  | < VIRG: "," >
  | < DOT: "." >
  | < EQ: "=" >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < SEMICOLON: ";" >
  | < LESS: "<" >
  | < NOT: "!" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < STAR: "*" >
  | < AND: "&&" >
  | < IF: "if" >
  | < ELSE: "else" >
  | < WHILE: "while" >
  | < NEW: "new" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < LENGTH: "length" >
  | < THIS: "this" >
  | < VOID: "void" >
  | < PRINT: "System.out.println" >
  | < BOOLEAN: "boolean" >
  | < INTEGER: "int" >
  | < STRING: "String" >
  | < STATIC: "static" >
  | < EXTENDS: "extends" >
  | < RETURN: "return" >
  | < CLASS: "class" >
  | < PUBLIC: "public" >
  | < MAIN: "main" >
  | < IDENTIFIER: (< LETTER >) (< LETTER >| < DIGIT >)* >
  | < #DIGIT: ["0" - "9"] >
  | < #LETTER: ["a" - "z"] | ["A" - "Z"] | "_" >
  | < INTEGER_LITERAL: (< DIGIT >)+ >
}
SKIP:
{
	< "//" (" ")* (["a" - "z","A" - "Z","0" - "9"," ","_",";"])* "\n" >
	| < "/*" (["a" - "z","A" - "Z","0" - "9"])* "*/" >
	| < " " >
	| < "\n" >
	| < "\t" >
}
    
 
    
    


// The following is a simple grammar that will allow you
// to test the generated lexer.

//Grammar available on: http://www.cambridge.org/resources/052182060X/MCIIJ2e/grammar.htm

Program Prog() :
{
	MainClass m;
	ClassDeclList cl;
}
{ m = MainClass() cl = ClassDeclList() {return new Program(m,cl);} }

MainClass MainClass() :
{
	Identifier i1,i2;
  	Statement s;
}
{ < CLASS > i1 = Identifier() < LBRACE > 
  < PUBLIC > < STATIC > < VOID > < MAIN > < LPAREN > < STRING > < LCOUCH > < RCOUCH > i2 = Identifier() < RPAREN > < LBRACE > s = Stm() < RBRACE > < RBRACE > 
  
{return new MainClass(i1,i2,s); } }

ClassDeclList ClassDeclList() :
{
	ClassDeclList cl = new ClassDeclList();
	ClassDecl c;
}
{ (c = ClassDeclOp() { cl.addElement(c); })* 
{return cl;}}

ClassDecl ClassDeclOp() :
{
	ClassDecl c;
}
{ (c = ClassDeclaration() | c = ClassDeclarationExtends())
{return c;} }

ClassDeclSimple ClassDeclaration() :
{
	Identifier i;
  	VarDeclList vl;  
  	MethodDeclList ml;
}
{ < CLASS > i = Identifier() < LBRACE > vl = VarDeclList() ml = MethodDeclList() < RBRACE > 

{return new ClassDeclSimple(i,vl,ml) }}

ClassDeclExtends ClassDeclarationExtends() :
{
	Identifier i;
	Identifier j;
  	VarDeclList vl;  
  	MethodDeclList ml;
}
{ < CLASS > i = Identifier() <EXTENDS> j = Identifier() < LBRACE > vl = VarDeclList() ml = MethodDeclList() < RBRACE > 

{return new ClassDeclExtends(i,j,vl,ml); }}

VarDeclList VarDeclList() :
{
	VarDeclList vl = new VarDeclList();
	VarDecl v;
}
{ (LOOKAHEAD(2) v = VarDeclaration() {vl.addElement(v);})*
	
{return vl;}}

VarDecl VarDeclaration() :
{
	Type t;
  	Identifier i;
}
{ t = Type() i = Identifier() < SEMICOLON > 

{return new VarDecl(t,i);}}

MethodDeclList MethodDeclList() :
{
	MethodDeclList ml = new MethodDeclList();
	MethodDecl m;
}
{ (m = MethodDeclaration() {ml.addElement(m);})*
	
{return ml;}}

MethodDecl MethodDeclaration() :
{
	Type t;
	Identifier i;
	FormalList fl;
	VarDeclList vl;
	StatementList sl;
	Exp e;
}
{ < PUBLIC > t = Type() i = Identifier() < LPAREN > (fl = FormalList())? < RPAREN > < LBRACE > (LOOKAHEAD(2) vl = VarDeclaration()) (sl = StatementList()) < RETURN > e = Exp() < SEMICOLON > < RBRACE > 

{return new MethodDeclaration(t,i,fl,vl,sl);}}

FormalList FormalList() :
{
	FormalList fl = new FormalList();
	Formal f;
}
{ (f = Formal() {fl.addElement(f);} (< VIRG > f = Formal() {fl.addElement(f);})*)

}

Formal Formal() :
{
	Type t;
  	Identifier i;
}
{ t = Type() i = Identifier()

{return new Formal(t,i);}}

Type Type() :
{
	Type t;
}
{ LOOKAHEAD(2) t = IntArrayType()
  | t = BooleanType()
  | LOOKAHEAD(2) t = IntegerType()
  | t = IdentifierType() 
  
{ return t; }}

IntArrayType IntArrayType() :
{
	Type t;
}
{ < INTEGER > < LCOUCH > < RCOUCH >

{return IntArrayType();}}

IntegerType IntegerType() :
{
	Type t;
}
{ < INTEGER > 

{return new IntegerType();}}
  
Type BooleanType() :
{}
{ < BOOLEAN >

{return new BooleanType();}}

Type IdentifierType() :
{
	i = Identifier();
}
{ i = Identifier()

{return new IdentifierType(i.s);}}

Identifier Identifier() :
{
	Token t;
}
{ t = < IDENTIFIER >

{return new Identifier(t.image);}}

StatementList StatementList()
{
	StatementList sl = new StatementList();
	Statement s;
}
{ (s = Stm() {sl.addElement(s);})*

{return sl;}}
  
Statement Stm() :
{
	Statement s;
}
{
	s = If()
	| s = While()
	| s = Print()
	| s = LOOKAHEAD(2) Assign()
	| s = ArrayAssign()
	
{return s;}}

Statement If() :
{
	Exp e;
	Statement s1,s2;	
}
{ < IF > < LPAREN > e = Exp() < RPAREN > s1 = Stm() < ELSE > s2 = Stm()
	
{return new If(e,s1,s2);}}

Statement While() :
{
	Exp e;
	Statement s;
}
{ < WHILE > < LPAREN > e = Exp() < RPAREN > s = Stm()

{return new While(s,e);}}

Statement Print() :
{
	Exp e;
}
{ < PRINT > < LPAREN > e = Exp() < RPAREN > < SEMICOLON >

{return new Print(e);}}

Statement Assign() :
{
	Identifier i;
	Exp e;
}
{ LOOKAHEAD(2) i = Identifier() < EQ > e = Exp() < SEMICOLON >

{return new Assign(i,e);}}

Statement ArrayAssign() :
{
	Identifier i;
	Exp e1,e2;
}
{ i = Identifier() < LCOUCH > e = Exp() < RCOUCH > < EQ > e = Exp() < SEMICOLON >

{return new ArrayAssign(i,e1,e2);}}

void Exp() :
{}
{ ExpObj1() (LOOKAHEAD(2) ExpFin())? }

void ExpObj1() :
{}
{ Term() (LOOKAHEAD(2) Op() ExpObj1())? }

void Term() :
{}
{ < INTEGER_LITERAL >
  | < TRUE >
  | < FALSE >
  | Identifier()
  | < THIS >
  | LOOKAHEAD(2) < NEW > < INTEGER > < LCOUCH > Exp() < RCOUCH >
  | LOOKAHEAD(2) < NEW > Identifier() < LPAREN > < RPAREN >
  | < NOT > Exp()
  | < LPAREN > Exp() < RPAREN >}
  
void Op() :
{}
{
  < AND >
  | < LESS >
  | < PLUS >
  | < MINUS >
  | < STAR > }

void ExpFin() :
{}
{
  (< AND >|< LESS >|< PLUS >|< MINUS >|< STAR >) ExpObj1()
  | < LCOUCH > Exp() < RCOUCH >
  | LOOKAHEAD(2) < DOT > < LENGTH >
  | LOOKAHEAD(2) < DOT > Identifier() < LPAREN > (Exp() (< VIRG > Exp())*)? < RPAREN >}

void Goal() :
{}
{
  ( MiniJavaToken() )*
  <EOF>
}

void Start() :
{}
{
  ( Prog() )*
  <EOF>
}

void MiniJavaToken():
{}
{
  "class"  |  <IDENTIFIER> | "{" | "public" | "static" | "void" |
  "main" | "(" | "String"  | "[" | "]" | ")" | "}" | "extends" | ";"
  | "return" | "," | "int" | "boolean" | "=" | "if" | "else" | "while"
  | "System.out.println" | "&&" | "<" | "+" | "-" | "*" | "." |
  "length" | <INTEGER_LITERAL> | "true" | "false" | "this" | "new" |
  "!"
}


